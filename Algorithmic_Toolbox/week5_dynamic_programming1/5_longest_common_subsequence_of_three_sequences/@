#include <iostream>
#include <vector>

using std::vector;

vector<int> lcs2(const vector<int> &a, const vector<int> &b) {
    int m = a.size() + 1;
    int n = b.size() + 1;
    vector<int> temp(n);
    vector<vector<int>> T(m,temp);

    vector<int> c;
    //Base case. All T[0][i] and T[j][0] are 0 each. i.e there are no common substrings.
    for (int i = 1; i < m; ++i) {
        for (int j = 1; j < n; ++j) {
            int t = (a[i-1] == b[j-1])  ;
          //  T[i][j] = std::max({c+T[i-1][j-1], T[i-1][j], T[i][j-1]});
              int temp = std::max(T[i][j-1], T[i-1][j]);
              T[i][j] = std::max(temp, t + T[i-1][j-1]);

              if ( (T[i][j] > temp) &&  (T[i][j] == 1 + T[i-1][j-1])){
                c.push_back(a[i-1]);
                std::cout << "T[i][j]: " << T[i][j] << " i: " << i << " j: " << j << " a[i-1]: " << a[i-1] << "\n";

              }
        }
    }
    
    if (c.size() != T[m-1][n-1]) {
        for (const int& e: c)
            std::cout << e << "," ;
        std::cout << "\nERROR " << c.size() << "," << T[m-1][n-1] << "\n";
    }   

  for (auto& e: T) {
    for(auto& f: e) 
        std::cout << f << " ";
    std::cout << "\n" ;
    }
  return c;
}


int lcs3(vector<int> &a, vector<int> &b, vector<int> &c) {
    
    vector<int> d = lcs2(a,b);
    vector<int> e = lcs2(d,c);
    return e.size();
}

int main() {
    /*
  size_t an;
  std::cin >> an;
  vector<int> a(an);
  for (size_t i = 0; i < an; i++) {
    std::cin >> a[i];
  }
  size_t bn;
  std::cin >> bn;
  vector<int> b(bn);
  for (size_t i = 0; i < bn; i++) {
    std::cin >> b[i];
  }
  size_t cn;
  std::cin >> cn;
  vector<int> c(cn);
  for (size_t i = 0; i < cn; i++) {
    std::cin >> c[i];
  }
  std::cout << lcs3(a, b, c) << std::endl;
  */
  vector<int> d = {8,3,2,1,7};
  vector<int> e = {8,2,1,3,8,10,7};
  vector<int> f = {6,8,3,1,4,7};
  std::cout << lcs3(d, e, f) << std::endl;
}
